{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Projects\\\\secure-book-v2\\\\client\\\\src\\\\components\\\\ListPost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport PostComponent from \"./Post\";\nimport { getPosts } from \"../services/post.service\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"../socket/socket-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ListPost() {\n  _s();\n  const domain = process.env.REACT_APP_SERVER_SERVICE;\n  const [post, setPost] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const maxPost = useRef(0);\n  const limit = 5;\n  const offset = 0;\n  useEffect(() => {\n    fetchMoreData();\n  }, []);\n  async function fetchMoreData() {\n    const payload = await getPosts(limit, offset + maxPost.current);\n    console.log(payload.data);\n    // if (payload.data.length > 0) {\n    //     setPost([...post, ...payload.data])\n    //     maxPost.current += payload.length\n    //     setHasMore(true)\n    // } else {\n    //     setHasMore(false)\n    // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: post.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this),\n    scrollableTarget: \"content\",\n    children: post.map((item, index) => /*#__PURE__*/_jsxDEV(PostComponent, {\n      post: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(ListPost, \"nuNl5fmIEqC1FbMwrcISMvkinAA=\");\n_c = ListPost;\nvar _c;\n$RefreshReg$(_c, \"ListPost\");","map":{"version":3,"names":["React","useState","useEffect","useRef","PostComponent","getPosts","InfiniteScroll","jsxDEV","_jsxDEV","ListPost","_s","domain","process","env","REACT_APP_SERVER_SERVICE","post","setPost","hasMore","setHasMore","maxPost","limit","offset","fetchMoreData","payload","current","console","log","data","dataLength","length","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","map","item","index","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Projects/secure-book-v2/client/src/components/ListPost.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport PostComponent from \"./Post\";\r\nimport { getPosts } from \"../services/post.service\";\r\n\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport \"../socket/socket-client\";\r\n\r\nexport default function ListPost() {\r\n    const domain = process.env.REACT_APP_SERVER_SERVICE;\r\n    const [post, setPost] = useState([]);\r\n    const [hasMore, setHasMore] = useState(false)\r\n   \r\n    const maxPost = useRef(0);\r\n    const limit = 5;\r\n    const offset = 0;\r\n\r\n    useEffect(() => {\r\n        fetchMoreData()\r\n\r\n    }, [])\r\n\r\n    async function fetchMoreData() {\r\n        const payload = await getPosts(limit, offset + maxPost.current)\r\n        console.log(payload.data)\r\n        // if (payload.data.length > 0) {\r\n        //     setPost([...post, ...payload.data])\r\n        //     maxPost.current += payload.length\r\n        //     setHasMore(true)\r\n        // } else {\r\n        //     setHasMore(false)\r\n        // }\r\n    }\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={post.length}\r\n            next={fetchMoreData}\r\n            hasMore={hasMore}\r\n            loader={<h4>Loading...</h4>}\r\n            scrollableTarget=\"content\"\r\n        >\r\n            {\r\n                post.map((item, index) => (\r\n                    <PostComponent post={item}/>\r\n                ))\r\n            }\r\n        </InfiniteScroll>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,aAAa,MAAM,QAAQ;AAClC,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EACnD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMkB,OAAO,GAAGhB,MAAM,CAAC,CAAC,CAAC;EACzB,MAAMiB,KAAK,GAAG,CAAC;EACf,MAAMC,MAAM,GAAG,CAAC;EAEhBnB,SAAS,CAAC,MAAM;IACZoB,aAAa,CAAC,CAAC;EAEnB,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeA,aAAaA,CAAA,EAAG;IAC3B,MAAMC,OAAO,GAAG,MAAMlB,QAAQ,CAACe,KAAK,EAAEC,MAAM,GAAGF,OAAO,CAACK,OAAO,CAAC;IAC/DC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;EAEA,oBACInB,OAAA,CAACF,cAAc;IACXsB,UAAU,EAAEb,IAAI,CAACc,MAAO;IACxBC,IAAI,EAAER,aAAc;IACpBL,OAAO,EAAEA,OAAQ;IACjBc,MAAM,eAAEvB,OAAA;MAAAwB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAE;IAC5BC,gBAAgB,EAAC,SAAS;IAAAL,QAAA,EAGtBjB,IAAI,CAACuB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACjBhC,OAAA,CAACJ,aAAa;MAACW,IAAI,EAAEwB;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAC9B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEM,CAAC;AAEzB;AAAC1B,EAAA,CAzCuBD,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}