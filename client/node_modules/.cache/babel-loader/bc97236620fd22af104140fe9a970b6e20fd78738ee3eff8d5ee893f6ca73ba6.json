{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Projects\\\\secure-book-v2\\\\client\\\\src\\\\components\\\\ListPost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport PostComponent from \"./Post\";\nimport { getPosts } from \"../services/post.service\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport socket from \"../socket/socket-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ListPost() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const maxPost = useRef(0);\n  const limit = 4;\n  const offset = 0;\n  useEffect(() => {\n    fetchMoreData();\n  }, []);\n\n  // Cap nhat emoji realtime\n  useEffect(() => {\n    socket.on(\"recieveEmoji\", payload => {\n      console.log(\"dd\");\n      const {\n        postId,\n        reaction\n      } = payload;\n      const newPosts = posts.map(item => {\n        if (item._id === postId) {\n          item.loves = reaction.data;\n        }\n        return item;\n      });\n      setPosts(newPosts);\n    });\n    return () => {\n      socket.off(\"recieveEmoji\");\n    };\n  });\n  useEffect(() => {\n    socket.on(\"delete-post\", payload => {\n      if (posts.length === 0) return;\n      const postId = payload.data;\n      const newPosts = posts.filter(item => item._id !== postId);\n      setPosts(newPosts);\n    });\n    socket.on(\"new-post\", payload => {\n      // Thêm new post vào đầu mảng\n      setPosts([payload.data, ...posts]);\n    });\n    return () => {\n      socket.off(\"delete-post\");\n      socket.off(\"new-post\");\n    };\n  });\n  async function fetchMoreData() {\n    const payload = await getPosts(limit, offset + maxPost.current);\n    if (payload.data.length > 0) {\n      // Add new post to list post\n      setPosts([...posts, ...payload.data]);\n      maxPost.current += payload.data.length;\n\n      // Check has more post\n      setHasMore(true);\n    } else {\n      setHasMore(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: posts.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }, this),\n    scrollableTarget: \"content\",\n    style: {\n      overflow: \"hidden\"\n    },\n    children: posts.map((item, index) => /*#__PURE__*/_jsxDEV(PostComponent, {\n      post: item,\n      posts: posts\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(ListPost, \"oKCkqoxlF3R8NTWWpXlaumRY6bw=\");\n_c = ListPost;\nvar _c;\n$RefreshReg$(_c, \"ListPost\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useContext","PostComponent","getPosts","InfiniteScroll","socket","jsxDEV","_jsxDEV","ListPost","_s","posts","setPosts","hasMore","setHasMore","maxPost","limit","offset","fetchMoreData","on","payload","console","log","postId","reaction","newPosts","map","item","_id","loves","data","off","length","filter","current","dataLength","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","style","overflow","index","post","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Projects/secure-book-v2/client/src/components/ListPost.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport PostComponent from \"./Post\";\r\nimport { getPosts } from \"../services/post.service\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport socket from \"../socket/socket-client\";\r\n\r\nexport default function ListPost() {\r\n    const [posts, setPosts] = useState([]);\r\n    const [hasMore, setHasMore] = useState(false)\r\n\r\n    const maxPost = useRef(0);\r\n    const limit = 4;\r\n    const offset = 0;\r\n\r\n    useEffect(() => {\r\n        fetchMoreData()\r\n    }, [])\r\n\r\n    // Cap nhat emoji realtime\r\n    useEffect(() => {\r\n        socket.on(\"recieveEmoji\", (payload) => {\r\n            console.log(\"dd\")\r\n            const { postId, reaction } = payload;\r\n            \r\n            const newPosts = posts.map((item) => {\r\n                if (item._id === postId) {\r\n                    item.loves = reaction.data;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            setPosts(newPosts);\r\n        });\r\n    \r\n        return () => {\r\n            socket.off(\"recieveEmoji\");\r\n        };\r\n    })\r\n\r\n    useEffect(() => {\r\n        socket.on(\"delete-post\", (payload) => {\r\n            if (posts.length === 0) return;\r\n    \r\n            const postId = payload.data;\r\n            const newPosts = posts.filter((item) => item._id !== postId);\r\n            setPosts(newPosts);\r\n        });\r\n    \r\n        socket.on(\"new-post\", (payload) => { \r\n            // Thêm new post vào đầu mảng\r\n            setPosts([payload.data, ...posts]);\r\n        });\r\n    \r\n        return () => {\r\n            socket.off(\"delete-post\");\r\n            socket.off(\"new-post\");\r\n        };\r\n    });\r\n    \r\n    async function fetchMoreData() {\r\n        const payload = await getPosts(limit, offset + maxPost.current)\r\n\r\n        if (payload.data.length > 0) {\r\n            // Add new post to list post\r\n            setPosts([...posts, ...payload.data])\r\n            maxPost.current += payload.data.length\r\n\r\n            // Check has more post\r\n            setHasMore(true)\r\n        } else {\r\n            setHasMore(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={posts.length}\r\n            next={fetchMoreData}\r\n            hasMore={hasMore}\r\n            loader={<h4>Loading...</h4>}\r\n            scrollableTarget=\"content\"\r\n            style={\r\n                {\r\n                    overflow: \"hidden\"\r\n                }\r\n            }\r\n        >\r\n            {\r\n                posts.map((item, index) => (\r\n                    <PostComponent key={index} post={item} posts={posts} />\r\n                ))\r\n            }\r\n        </InfiniteScroll>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}