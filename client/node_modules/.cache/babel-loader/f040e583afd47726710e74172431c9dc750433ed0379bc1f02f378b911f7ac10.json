{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import Post from \"./Post\";\n// import socket from \"../socket/socket-client\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n// // import { getLimitPost, getNumberPost } from \"../adapters/post\";\n\n// const server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_PORT\n\n// export default function ListPost() {\n//     const [maxPost, setMaxPost] = useState(0)\n//     const [fromPage, setFromPage] = useState(1)\n//     const [limitPost, setLimitPost] = useState(2)\n//     const [post, setPost] = useState([]);\n//     const [hasMore, setHasMore] = useState(false)\n//     const userRef = useRef();\n\n//     useEffect(() => {\n//         userRef.current = JSON.parse(localStorage.getItem(\"userAuth\")).user\n\n//         fetchData(fromPage - 1, limitPost);\n\n//         getMaxPost();\n\n//     }, [])\n\n//     useEffect(() => {\n\n//         function handlePostAdded(newPost) {\n\n//             const newList = [newPost, ...post]\n\n//             setPost(newList)\n//         }\n\n//         function handleCommentAdded(newComment) {\n//             setPost((prevPost) => {\n//                 const updatedPost = prevPost.map((postItem) => {\n//                     if (postItem._id === newComment.postID) {    \n//                         const updatedComments = [newComment, ...postItem.comments];\n//                         return {\n//                             ...postItem,\n//                             comments: updatedComments,\n//                         };\n//                     }\n//                     return postItem;\n//                 });\n//                 return updatedPost; // React sẽ tự động cập nhật lại trạng thái post với updatedPost\n//             });\n//         }\n\n//         socket.on(\"postAdded\", handlePostAdded)\n//         socket.on(\"commentAdded\", handleCommentAdded)\n\n//         return () => {\n//             socket.off(\"postAdded\", handlePostAdded)\n//             socket.off(\"commentAdded\", handleCommentAdded)\n//         }\n\n//     }, []);\n\n//     async function getMaxPost() {\n//         const MAXPOST = await getNumberPost()\n\n//         setMaxPost(MAXPOST.numberPost)\n\n//         if (MAXPOST.numberPost > 0)\n//             setHasMore(true)\n//     }\n\n//     async function fetchData(fromPage, toPage) {\n//         // Gửi thông báo đến server để lấy bài viết\n//         const data = await getLimitPost(fromPage, toPage, userRef.current._id)\n\n//         setPost(data)\n//     }\n\n//     async function fetchMoreData() {\n//         if (post.length === maxPost) {\n//             setHasMore(false)\n//             return\n//         }\n\n//         const toPost = post.length + limitPost\n//         console.log(`[From Post: ${post.length} - ToPost${toPost}]`)\n\n//         // Lấy thêm dữ liệu\n//         const data = await getLimitPost(post.length, toPost, userRef.current._id);\n//         console.log(\"Data\", data)\n//         const newData = post.concat(data)\n\n//         setPost(newData)\n//     }\n\n//     return (\n//         <InfiniteScroll\n//             dataLength={post.length}\n//             next={fetchMoreData}\n//             hasMore={hasMore}\n//             loader={<h4>Loading...</h4>}\n//             scrollableTarget=\"content\"\n//         >\n//             {\n//                 post.map((item, index) => (\n//                     <Post\n//                         key={index}\n\n//                         _id={item._id}\n\n//                         sender={item.sender}\n\n//                         content={{\n//                             text: item.content.text,\n//                             image: item.content.image !== \"\" ? `${server}/uploads/${item.content.image}` : \"\",\n//                         }}\n\n//                         creationTime={item.creationTime}\n\n//                         comments={item.comments}\n\n//                         post={post}\n\n//                         setPost={setPost}\n\n//                         loves={item.loves}      // Tổng số lượt tương tác bài viết\n\n//                         isLove={item.isLove}                        // Trạng thái tương tác\n//                     />\n//                 ))\n//             }\n//         </InfiniteScroll>\n//     );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/quoct/Data/Projects/secure-book-v2/client/src/components/ListPost.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n// import Post from \"./Post\";\r\n// import socket from \"../socket/socket-client\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n// // import { getLimitPost, getNumberPost } from \"../adapters/post\";\r\n\r\n// const server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_PORT\r\n\r\n// export default function ListPost() {\r\n//     const [maxPost, setMaxPost] = useState(0)\r\n//     const [fromPage, setFromPage] = useState(1)\r\n//     const [limitPost, setLimitPost] = useState(2)\r\n//     const [post, setPost] = useState([]);\r\n//     const [hasMore, setHasMore] = useState(false)\r\n//     const userRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         userRef.current = JSON.parse(localStorage.getItem(\"userAuth\")).user\r\n        \r\n//         fetchData(fromPage - 1, limitPost);\r\n\r\n//         getMaxPost();\r\n\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n\r\n//         function handlePostAdded(newPost) {\r\n\r\n//             const newList = [newPost, ...post]\r\n\r\n//             setPost(newList)\r\n//         }\r\n\r\n//         function handleCommentAdded(newComment) {\r\n//             setPost((prevPost) => {\r\n//                 const updatedPost = prevPost.map((postItem) => {\r\n//                     if (postItem._id === newComment.postID) {    \r\n//                         const updatedComments = [newComment, ...postItem.comments];\r\n//                         return {\r\n//                             ...postItem,\r\n//                             comments: updatedComments,\r\n//                         };\r\n//                     }\r\n//                     return postItem;\r\n//                 });\r\n//                 return updatedPost; // React sẽ tự động cập nhật lại trạng thái post với updatedPost\r\n//             });\r\n//         }\r\n\r\n//         socket.on(\"postAdded\", handlePostAdded)\r\n//         socket.on(\"commentAdded\", handleCommentAdded)\r\n\r\n//         return () => {\r\n//             socket.off(\"postAdded\", handlePostAdded)\r\n//             socket.off(\"commentAdded\", handleCommentAdded)\r\n//         }\r\n\r\n//     }, []);\r\n\r\n//     async function getMaxPost() {\r\n//         const MAXPOST = await getNumberPost()\r\n\r\n//         setMaxPost(MAXPOST.numberPost)\r\n\r\n//         if (MAXPOST.numberPost > 0)\r\n//             setHasMore(true)\r\n//     }\r\n\r\n//     async function fetchData(fromPage, toPage) {\r\n//         // Gửi thông báo đến server để lấy bài viết\r\n//         const data = await getLimitPost(fromPage, toPage, userRef.current._id)\r\n\r\n//         setPost(data)\r\n//     }\r\n\r\n//     async function fetchMoreData() {\r\n//         if (post.length === maxPost) {\r\n//             setHasMore(false)\r\n//             return\r\n//         }\r\n\r\n//         const toPost = post.length + limitPost\r\n//         console.log(`[From Post: ${post.length} - ToPost${toPost}]`)\r\n\r\n//         // Lấy thêm dữ liệu\r\n//         const data = await getLimitPost(post.length, toPost, userRef.current._id);\r\n//         console.log(\"Data\", data)\r\n//         const newData = post.concat(data)\r\n\r\n//         setPost(newData)\r\n//     }\r\n\r\n//     return (\r\n//         <InfiniteScroll\r\n//             dataLength={post.length}\r\n//             next={fetchMoreData}\r\n//             hasMore={hasMore}\r\n//             loader={<h4>Loading...</h4>}\r\n//             scrollableTarget=\"content\"\r\n//         >\r\n//             {\r\n//                 post.map((item, index) => (\r\n//                     <Post\r\n//                         key={index}\r\n\r\n//                         _id={item._id}\r\n\r\n//                         sender={item.sender}\r\n\r\n//                         content={{\r\n//                             text: item.content.text,\r\n//                             image: item.content.image !== \"\" ? `${server}/uploads/${item.content.image}` : \"\",\r\n//                         }}\r\n\r\n//                         creationTime={item.creationTime}\r\n\r\n//                         comments={item.comments}\r\n\r\n//                         post={post}\r\n\r\n//                         setPost={setPost}\r\n\r\n//                         loves={item.loves}      // Tổng số lượt tương tác bài viết\r\n\r\n//                         isLove={item.isLove}                        // Trạng thái tương tác\r\n//                     />\r\n//                 ))\r\n//             }\r\n//         </InfiniteScroll>\r\n//     );\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}