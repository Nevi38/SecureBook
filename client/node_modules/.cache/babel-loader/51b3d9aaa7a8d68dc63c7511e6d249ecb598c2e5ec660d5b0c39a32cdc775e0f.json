{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Projects\\\\secure-book-v2\\\\client\\\\src\\\\contexts\\\\AudioContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AudioContextClass {\n  constructor() {\n    this.audio = new Audio();\n    this.playing = false;\n    this.duration = 0;\n    this.albums = [];\n    this.currentIndex = 0;\n  }\n  setAlbums(albums) {\n    this.albums = albums;\n  }\n  nextSong() {\n    this.currentIndex++;\n    this.play();\n  }\n  setDuration(duration) {\n    this.duration = duration;\n  }\n  play(id) {\n    if (id) {\n      this.currentIndex = this.albums.findIndex(album => album.albumId === id);\n    }\n    if (this.playing) {\n      this.audio.pause();\n    }\n    this.audio.src = process.env.REACT_APP_SERVER_SERVICE + \"/musics/\" + this.albums[this.currentIndex].albumId + \"/\" + this.albums[this.currentIndex].file;\n    console.log(this.albums);\n    this.audio.play();\n    this.playing = true;\n  }\n  pause() {\n    this.audio.pause();\n    this.playing = false;\n  }\n}\nconst AudioContext = /*#__PURE__*/createContext();\nexport const AudioProvider = ({\n  children\n}) => {\n  _s();\n  const audioContextRef = useRef(new AudioContextClass());\n  return /*#__PURE__*/_jsxDEV(AudioContext.Provider, {\n    value: audioContextRef.current,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioProvider, \"UGdNwH4cktezdR98Xpj2Tne/O0g=\");\n_c = AudioProvider;\nexport const useAudioContext = () => {\n  _s2();\n  const context = useContext(AudioContext);\n  if (!context) {\n    throw new Error('useAudioContext must be used within an AudioProvider');\n  }\n  return context;\n};\n_s2(useAudioContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AudioProvider\");","map":{"version":3,"names":["React","createContext","useContext","useRef","jsxDEV","_jsxDEV","AudioContextClass","constructor","audio","Audio","playing","duration","albums","currentIndex","setAlbums","nextSong","play","setDuration","id","findIndex","album","albumId","pause","src","process","env","REACT_APP_SERVER_SERVICE","file","console","log","AudioContext","AudioProvider","children","_s","audioContextRef","Provider","value","current","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAudioContext","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Projects/secure-book-v2/client/src/contexts/AudioContext.js"],"sourcesContent":["import React, { createContext, useContext, useRef } from 'react';\r\n\r\nclass AudioContextClass {\r\n  constructor() {\r\n    this.audio = new Audio();\r\n    this.playing = false;\r\n    this.duration = 0;\r\n    this.albums = [];\r\n    this.currentIndex = 0;\r\n  }\r\n\r\n  setAlbums(albums) {\r\n    this.albums = albums;\r\n  }\r\n\r\n  nextSong() {\r\n    this.currentIndex++;\r\n    this.play();\r\n  }\r\n\r\n  setDuration(duration) {\r\n    this.duration = duration;\r\n  }\r\n\r\n  play(id) {\r\n    \r\n    if (id) {\r\n      this.currentIndex = this.albums.findIndex((album) => album.albumId === id);\r\n    }\r\n\r\n    if (this.playing) {\r\n      this.audio.pause();\r\n    }\r\n    this.audio.src = \r\n      process.env.REACT_APP_SERVER_SERVICE + \"/musics/\" +\r\n      this.albums[this.currentIndex].albumId + \"/\" +\r\n      this.albums[this.currentIndex].file;\r\n    console.log(this.albums)\r\n    this.audio.play();\r\n    this.playing = true;\r\n  }\r\n\r\n  pause() {\r\n    this.audio.pause();\r\n    this.playing = false;\r\n  }\r\n}\r\n\r\nconst AudioContext = createContext();\r\n\r\nexport const AudioProvider = ({ children }) => {\r\n  const audioContextRef = useRef(new AudioContextClass());\r\n\r\n  return (\r\n    <AudioContext.Provider value={audioContextRef.current}>\r\n      {children}\r\n    </AudioContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAudioContext = () => {\r\n  const context = useContext(AudioContext);\r\n  if (!context) {\r\n    throw new Error('useAudioContext must be used within an AudioProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,iBAAiB,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,QAAQ,GAAG,CAAC;IACjB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,YAAY,GAAG,CAAC;EACvB;EAEAC,SAASA,CAACF,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACtB;EAEAG,QAAQA,CAAA,EAAG;IACT,IAAI,CAACF,YAAY,EAAE;IACnB,IAAI,CAACG,IAAI,CAAC,CAAC;EACb;EAEAC,WAAWA,CAACN,QAAQ,EAAE;IACpB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEAK,IAAIA,CAACE,EAAE,EAAE;IAEP,IAAIA,EAAE,EAAE;MACN,IAAI,CAACL,YAAY,GAAG,IAAI,CAACD,MAAM,CAACO,SAAS,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAKH,EAAE,CAAC;IAC5E;IAEA,IAAI,IAAI,CAACR,OAAO,EAAE;MAChB,IAAI,CAACF,KAAK,CAACc,KAAK,CAAC,CAAC;IACpB;IACA,IAAI,CAACd,KAAK,CAACe,GAAG,GACZC,OAAO,CAACC,GAAG,CAACC,wBAAwB,GAAG,UAAU,GACjD,IAAI,CAACd,MAAM,CAAC,IAAI,CAACC,YAAY,CAAC,CAACQ,OAAO,GAAG,GAAG,GAC5C,IAAI,CAACT,MAAM,CAAC,IAAI,CAACC,YAAY,CAAC,CAACc,IAAI;IACrCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,MAAM,CAAC;IACxB,IAAI,CAACJ,KAAK,CAACQ,IAAI,CAAC,CAAC;IACjB,IAAI,CAACN,OAAO,GAAG,IAAI;EACrB;EAEAY,KAAKA,CAAA,EAAG;IACN,IAAI,CAACd,KAAK,CAACc,KAAK,CAAC,CAAC;IAClB,IAAI,CAACZ,OAAO,GAAG,KAAK;EACtB;AACF;AAEA,MAAMoB,YAAY,gBAAG7B,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAM8B,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAMC,eAAe,GAAG/B,MAAM,CAAC,IAAIG,iBAAiB,CAAC,CAAC,CAAC;EAEvD,oBACED,OAAA,CAACyB,YAAY,CAACK,QAAQ;IAACC,KAAK,EAAEF,eAAe,CAACG,OAAQ;IAAAL,QAAA,EACnDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACR,EAAA,CARWF,aAAa;AAAAW,EAAA,GAAbX,aAAa;AAU1B,OAAO,MAAMY,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,MAAMC,OAAO,GAAG3C,UAAU,CAAC4B,YAAY,CAAC;EACxC,IAAI,CAACe,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,eAAe;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}