{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Projects\\\\secure-book-v2\\\\client\\\\src\\\\components\\\\ListPost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport PostComponent from \"./Post\";\nimport { getPosts } from \"../services/post.service\";\nimport { UserContext } from \"../contexts/UserContext\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport socket from \"../socket/socket-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ListPost() {\n  _s();\n  const user = useContext(UserContext);\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const maxPost = useRef(0);\n  const limit = 6;\n  const offset = 0;\n  useEffect(() => {\n    fetchMoreData();\n  }, []);\n  useEffect(() => {\n    function handlePostAdded(newPost) {\n      const newList = [newPost, ...posts];\n      setPosts(newList);\n    }\n    function handleCommentAdded(newComment) {\n      setPosts(prevPost => {\n        const updatedPost = prevPost.map(postItem => {\n          if (postItem._id === newComment.postID) {\n            // Nếu postID trùng khớp với postItem._id, chèn newComment vào đầu mảng comments\n            const updatedComments = [newComment, ...postItem.comments];\n            return {\n              ...postItem,\n              comments: updatedComments\n            };\n          }\n          return postItem;\n        });\n        return updatedPost;\n      });\n    }\n    socket.on(\"postAdded\", handlePostAdded);\n    socket.on(\"commentAdded\", handleCommentAdded);\n    return () => {\n      socket.off(\"postAdded\", handlePostAdded);\n      socket.off(\"commentAdded\", handleCommentAdded);\n    };\n  }, []);\n  async function fetchMoreData() {\n    const payload = await getPosts(limit, offset + maxPost.current);\n    if (payload.data.length > 0) {\n      setPosts([...posts, ...payload.data]);\n      maxPost.current += payload.data.length;\n      setHasMore(true);\n    } else {\n      setHasMore(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: posts.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }, this),\n    scrollableTarget: \"content\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s(ListPost, \"Den4tBXI2pfrVU9I/Z0CI3dvY4k=\");\n_c = ListPost;\nvar _c;\n$RefreshReg$(_c, \"ListPost\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useContext","PostComponent","getPosts","UserContext","InfiniteScroll","socket","jsxDEV","_jsxDEV","ListPost","_s","user","posts","setPosts","hasMore","setHasMore","maxPost","limit","offset","fetchMoreData","handlePostAdded","newPost","newList","handleCommentAdded","newComment","prevPost","updatedPost","map","postItem","_id","postID","updatedComments","comments","on","off","payload","current","data","length","dataLength","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Projects/secure-book-v2/client/src/components/ListPost.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport PostComponent from \"./Post\";\r\nimport { getPosts } from \"../services/post.service\";\r\nimport { UserContext } from \"../contexts/UserContext\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport socket from \"../socket/socket-client\";\r\n\r\nexport default function ListPost() {\r\n    const user = useContext(UserContext);\r\n    const [posts, setPosts] = useState([]);\r\n    const [hasMore, setHasMore] = useState(false)\r\n\r\n    const maxPost = useRef(0);\r\n    const limit = 6;\r\n    const offset = 0;\r\n\r\n    useEffect(() => {\r\n        fetchMoreData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        function handlePostAdded(newPost) {\r\n\r\n            const newList = [newPost, ...posts]\r\n\r\n            setPosts(newList)\r\n        }\r\n\r\n        function handleCommentAdded(newComment) {\r\n            setPosts((prevPost) => {\r\n                const updatedPost = prevPost.map((postItem) => {\r\n                    if (postItem._id === newComment.postID) {    \r\n                        // Nếu postID trùng khớp với postItem._id, chèn newComment vào đầu mảng comments\r\n                        const updatedComments = [newComment, ...postItem.comments];\r\n                        return {\r\n                            ...postItem,\r\n                            comments: updatedComments,\r\n                        };\r\n                    }\r\n                    return postItem;\r\n                });\r\n                return updatedPost;\r\n            });\r\n        }\r\n\r\n        socket.on(\"postAdded\", handlePostAdded)\r\n        socket.on(\"commentAdded\", handleCommentAdded)\r\n\r\n        return () => {\r\n            socket.off(\"postAdded\", handlePostAdded)\r\n            socket.off(\"commentAdded\", handleCommentAdded)\r\n        }\r\n\r\n    }, []);\r\n\r\n    async function fetchMoreData() {\r\n        const payload = await getPosts(limit, offset + maxPost.current)\r\n       \r\n        if (payload.data.length > 0) {\r\n            setPosts([...posts, ...payload.data])\r\n            maxPost.current += payload.data.length\r\n            setHasMore(true)\r\n        } else {\r\n            setHasMore(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={posts.length}\r\n            next={fetchMoreData}\r\n            hasMore={hasMore}\r\n            loader={<h4>Loading...</h4>}\r\n            scrollableTarget=\"content\"\r\n        >\r\n            \r\n        </InfiniteScroll>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}