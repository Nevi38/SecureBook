{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Projects\\\\secure-book-v2\\\\client\\\\src\\\\components\\\\ListPost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport PostComponent from \"./Post\";\nimport { getPosts } from \"../services/post.service\";\nimport { UserContext } from \"../contexts/UserContext\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport socket from \"../socket/socket-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ListPost() {\n  _s();\n  const user = useContext(UserContext);\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const maxPost = useRef(0);\n  const limit = 6;\n  const offset = 0;\n  useEffect(() => {\n    fetchMoreData();\n  }, []);\n  useEffect(() => {\n    socket.on(\"delete-post\", payload => {\n      if (posts.length === 0) return;\n      const postId = payload.data;\n      const newPosts = posts.filter(item => item._id !== postId).sort((a, b) => b.creationTime - a.creationTime).slice(); // Create a new array to avoid modifying the original array\n\n      setPosts(newPosts);\n    });\n    socket.on(\"new-post\", payload => {\n      const data = payload.data;\n\n      // Calc time ago of post.creationTime\n      data.creationTime = calcTimeAgo(data.creationTime);\n\n      // Add owner of post\n      data.owner = {\n        _id: user._id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        avatar: user.avatar\n      };\n\n      // Add new post to list post at the correct position\n      setPosts(prevPosts => {\n        const newPosts = [...prevPosts, data];\n        // Sort the new array based on creationTime\n        newPosts.sort((a, b) => b.creationTime - a.creationTime);\n        return newPosts;\n      });\n    });\n    return () => {\n      socket.off(\"delete-post\");\n      socket.off(\"new-post\");\n    };\n  }, [posts.length]);\n  async function fetchMoreData() {\n    const payload = await getPosts(limit, offset + maxPost.current);\n    if (payload.data.length > 0) {\n      // Calc time ago of post.creationTime\n      payload.data.map(item => {\n        item.creationTime = calcTimeAgo(item.creationTime);\n      });\n\n      // Add new post to list post\n      setPosts([...posts, ...payload.data]);\n      maxPost.current += payload.data.length;\n\n      // Check has more post\n      setHasMore(true);\n    } else {\n      setHasMore(false);\n    }\n  }\n\n  // Calc time ago of post.creationTime\n  function calcTimeAgo(creationTime) {\n    const date = new Date(creationTime);\n    const now = new Date();\n    const timeAgo = now - date;\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const week = day * 7;\n    const month = day * 30;\n    const year = month * 12;\n    if (timeAgo < minute) {\n      return \"Vừa xong\";\n    } else if (timeAgo < hour) {\n      return Math.floor(timeAgo / minute) + \" phút\";\n    } else if (timeAgo < day) {\n      return Math.floor(timeAgo / hour) + \" giờ\";\n    } else if (timeAgo < week) {\n      return Math.floor(timeAgo / day) + \" ngày\";\n    } else if (timeAgo < month) {\n      return Math.floor(timeAgo / week) + \" tuần\";\n    } else if (timeAgo < year) {\n      return Math.floor(timeAgo / month) + \" tháng\";\n    } else {\n      return Math.floor(timeAgo / year) + \" năm\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: posts.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }, this),\n    scrollableTarget: \"content\",\n    children: posts.map((item, index) => /*#__PURE__*/_jsxDEV(PostComponent, {\n      post: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s(ListPost, \"Den4tBXI2pfrVU9I/Z0CI3dvY4k=\");\n_c = ListPost;\nvar _c;\n$RefreshReg$(_c, \"ListPost\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useContext","PostComponent","getPosts","UserContext","InfiniteScroll","socket","jsxDEV","_jsxDEV","ListPost","_s","user","posts","setPosts","hasMore","setHasMore","maxPost","limit","offset","fetchMoreData","on","payload","length","postId","data","newPosts","filter","item","_id","sort","a","b","creationTime","slice","calcTimeAgo","owner","firstName","lastName","avatar","prevPosts","off","current","map","date","Date","now","timeAgo","second","minute","hour","day","week","month","year","Math","floor","dataLength","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","index","post","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Projects/secure-book-v2/client/src/components/ListPost.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport PostComponent from \"./Post\";\r\nimport { getPosts } from \"../services/post.service\";\r\nimport { UserContext } from \"../contexts/UserContext\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport socket from \"../socket/socket-client\";\r\n\r\nexport default function ListPost() {\r\n    const user = useContext(UserContext);\r\n    const [posts, setPosts] = useState([]);\r\n    const [hasMore, setHasMore] = useState(false)\r\n\r\n    const maxPost = useRef(0);\r\n    const limit = 6;\r\n    const offset = 0;\r\n\r\n    useEffect(() => {\r\n        fetchMoreData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on(\"delete-post\", (payload) => {\r\n            if (posts.length === 0) return;\r\n\r\n            const postId = payload.data;\r\n            const newPosts = posts\r\n                .filter((item) => item._id !== postId)\r\n                .sort((a, b) => b.creationTime - a.creationTime)\r\n                .slice(); // Create a new array to avoid modifying the original array\r\n\r\n            setPosts(newPosts);\r\n        });\r\n\r\n        socket.on(\"new-post\", (payload) => {\r\n            const data = payload.data;\r\n        \r\n            // Calc time ago of post.creationTime\r\n            data.creationTime = calcTimeAgo(data.creationTime)\r\n        \r\n            // Add owner of post\r\n            data.owner = {\r\n                _id: user._id,\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                avatar: user.avatar,\r\n            }\r\n        \r\n            // Add new post to list post at the correct position\r\n            setPosts((prevPosts) => {\r\n                const newPosts = [...prevPosts, data];\r\n                // Sort the new array based on creationTime\r\n                newPosts.sort((a, b) => b.creationTime - a.creationTime);\r\n                return newPosts;\r\n            });\r\n        });\r\n        \r\n\r\n        return () => {\r\n            socket.off(\"delete-post\");\r\n            socket.off(\"new-post\");\r\n        };\r\n    }, [posts.length])\r\n\r\n    async function fetchMoreData() {\r\n        const payload = await getPosts(limit, offset + maxPost.current)\r\n\r\n        if (payload.data.length > 0) {\r\n            // Calc time ago of post.creationTime\r\n            payload.data.map((item) => {\r\n                item.creationTime = calcTimeAgo(item.creationTime)\r\n            })\r\n\r\n            // Add new post to list post\r\n            setPosts([...posts, ...payload.data])\r\n            maxPost.current += payload.data.length\r\n\r\n            // Check has more post\r\n            setHasMore(true)\r\n        } else {\r\n            setHasMore(false)\r\n        }\r\n    }\r\n\r\n    // Calc time ago of post.creationTime\r\n    function calcTimeAgo(creationTime) {\r\n        const date = new Date(creationTime);\r\n        const now = new Date();\r\n        const timeAgo = now - date;\r\n\r\n        const second = 1000;\r\n        const minute = second * 60;\r\n        const hour = minute * 60;\r\n        const day = hour * 24;\r\n        const week = day * 7;\r\n        const month = day * 30;\r\n        const year = month * 12;\r\n\r\n        if (timeAgo < minute) {\r\n            return \"Vừa xong\";\r\n        } else if (timeAgo < hour) {\r\n            return Math.floor(timeAgo / minute) + \" phút\";\r\n        } else if (timeAgo < day) {\r\n            return Math.floor(timeAgo / hour) + \" giờ\";\r\n        } else if (timeAgo < week) {\r\n            return Math.floor(timeAgo / day) + \" ngày\";\r\n        } else if (timeAgo < month) {\r\n            return Math.floor(timeAgo / week) + \" tuần\";\r\n        } else if (timeAgo < year) {\r\n            return Math.floor(timeAgo / month) + \" tháng\";\r\n        } else {\r\n            return Math.floor(timeAgo / year) + \" năm\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={posts.length}\r\n            next={fetchMoreData}\r\n            hasMore={hasMore}\r\n            loader={<h4>Loading...</h4>}\r\n            scrollableTarget=\"content\"\r\n        >\r\n            {\r\n                posts.map((item, index) => (\r\n                    <PostComponent key={index} post={item} />\r\n                ))\r\n            }\r\n        </InfiniteScroll>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}