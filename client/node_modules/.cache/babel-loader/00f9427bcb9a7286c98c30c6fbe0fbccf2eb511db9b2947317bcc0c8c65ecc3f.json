{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Projects\\\\secure-book-v2\\\\client\\\\src\\\\components\\\\MusicPlayerForm.jsx\",\n  _s = $RefreshSig$();\nimport { useContext, useState } from \"react\";\nimport MusicService from \"../services/music.service\";\nimport { UserContext } from \"../contexts/UserContext\";\nimport Resizer from 'react-image-file-resizer';\nimport ManualMusicUploadForm from \"../forms/manual_music_upload.form\";\nimport YoutubeMusicUploadForm from \"../forms/automatic_music_upload.form\";\n\n/**\r\n * Notifications (warnings)\r\n * @param {object} onPopup true: MusicPlayerForm will be show, otherwise\r\n * @param {object} onAlert { code, message }\r\n * @param {function} onState true (show alert) or false (hidden alert)\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MusicPlayerForm({\n  onPopup,\n  onAlert,\n  onState\n}) {\n  _s();\n  const [nameSong, setNameSong] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [music, setMusic] = useState(\"\");\n  const [fileName, setFileName] = useState('No file chosen');\n  const [songImage, setSongImage] = useState(null);\n  const [songImageFile, setSongImageFile] = useState('');\n  const [isSongNameValid, setIsSongNameValid] = useState(true);\n  const [isAuthorValid, setIsAuthorValid] = useState(true);\n\n  // Hình thức upload nhạc\n  const [isChooseLinkYoutube, setIsChooseLinkYoutube] = useState(true);\n  const [isChooseManual, setIsChooseManual] = useState(false);\n  const user = useContext(UserContext);\n  const handleFileChange = e => {\n    const fileInput = e.target;\n    if (fileInput.files.length > 0) {\n      setFileName(fileInput.files[0].name);\n      setMusic(fileInput.files[0]);\n    } else {\n      setFileName('Không có file được tải lên');\n    }\n  };\n  const handleImageChange = async e => {\n    const fileInput = e.target;\n    if (fileInput.files.length > 0) {\n      const resizeImage = await resizeFile(fileInput.files[0]);\n      setSongImageFile(resizeImage);\n\n      // Use FileReader to read the image and set it as a preview\n      const reader = new FileReader();\n      reader.onload = event => {\n        setSongImage(event.target.result);\n      };\n      reader.readAsDataURL(resizeImage);\n    } else {\n      setSongImage('Không có ảnh nào được chọn');\n    }\n  };\n  const resizeFile = file => {\n    return new Promise(resolve => {\n      Resizer.imageFileResizer(file, 295, 300, 'JPEG', 100, 0, uri => {\n        resolve(uri);\n      }, 'file');\n    });\n  };\n  const handleUploadClick = async () => {\n    if (nameSong.trim() == \"\") {\n      return;\n    }\n    if (author.trim() == \"\") {\n      return;\n    }\n    if (music == \"\") {\n      return;\n    }\n    const infoSong = {\n      'name': nameSong,\n      'author': author,\n      'owner': user._id,\n      'creationtime': new Date()\n    };\n\n    // Add music to database     \n    const payload = await MusicService.createMusic(infoSong, music, songImageFile);\n    onPopup(false);\n    onAlert({\n      code: payload.code,\n      message: payload.message\n    });\n    onState(true);\n    resetForm();\n  };\n  const resetForm = () => {\n    setNameSong(\"\");\n    setAuthor(\"\");\n    setFileName('No file chosen');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modalForm\",\n    children: isChooseManual ? /*#__PURE__*/_jsxDEV(ManualMusicUploadForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 32\n    }, this) : /*#__PURE__*/_jsxDEV(YoutubeMusicUploadForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 60\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(MusicPlayerForm, \"LJKS+NPuhl664VsAQDZ69j5pK6A=\");\n_c = MusicPlayerForm;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayerForm\");","map":{"version":3,"names":["useContext","useState","MusicService","UserContext","Resizer","ManualMusicUploadForm","YoutubeMusicUploadForm","jsxDEV","_jsxDEV","MusicPlayerForm","onPopup","onAlert","onState","_s","nameSong","setNameSong","author","setAuthor","music","setMusic","fileName","setFileName","songImage","setSongImage","songImageFile","setSongImageFile","isSongNameValid","setIsSongNameValid","isAuthorValid","setIsAuthorValid","isChooseLinkYoutube","setIsChooseLinkYoutube","isChooseManual","setIsChooseManual","user","handleFileChange","e","fileInput","target","files","length","name","handleImageChange","resizeImage","resizeFile","reader","FileReader","onload","event","result","readAsDataURL","file","Promise","resolve","imageFileResizer","uri","handleUploadClick","trim","infoSong","_id","Date","payload","createMusic","code","message","resetForm","className","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Projects/secure-book-v2/client/src/components/MusicPlayerForm.jsx"],"sourcesContent":["import { useContext, useState } from \"react\";\r\nimport MusicService from \"../services/music.service\";\r\nimport { UserContext } from \"../contexts/UserContext\";\r\nimport Resizer from 'react-image-file-resizer';\r\nimport ManualMusicUploadForm from \"../forms/manual_music_upload.form\";\r\nimport YoutubeMusicUploadForm from \"../forms/automatic_music_upload.form\";\r\n\r\n/**\r\n * Notifications (warnings)\r\n * @param {object} onPopup true: MusicPlayerForm will be show, otherwise\r\n * @param {object} onAlert { code, message }\r\n * @param {function} onState true (show alert) or false (hidden alert)\r\n */\r\nexport default function MusicPlayerForm({ onPopup, onAlert, onState }) {\r\n    const [nameSong, setNameSong] = useState(\"\")\r\n    const [author, setAuthor] = useState(\"\")\r\n\r\n    const [music, setMusic] = useState(\"\")\r\n    const [fileName, setFileName] = useState('No file chosen');\r\n\r\n    const [songImage, setSongImage] = useState(null);\r\n    const [songImageFile, setSongImageFile] = useState('');\r\n\r\n    const [isSongNameValid, setIsSongNameValid] = useState(true)\r\n    const [isAuthorValid, setIsAuthorValid] = useState(true)\r\n\r\n    // Hình thức upload nhạc\r\n    const [isChooseLinkYoutube, setIsChooseLinkYoutube] = useState(true)\r\n    const [isChooseManual, setIsChooseManual] = useState(false)\r\n\r\n    const user = useContext(UserContext);\r\n\r\n    const handleFileChange = (e) => {\r\n        const fileInput = e.target;\r\n        if (fileInput.files.length > 0) {\r\n            setFileName(fileInput.files[0].name);\r\n            setMusic(fileInput.files[0])\r\n        } else {\r\n            setFileName('Không có file được tải lên');\r\n        }\r\n    };\r\n\r\n    const handleImageChange = async (e) => {\r\n        const fileInput = e.target;\r\n        if (fileInput.files.length > 0) {\r\n            const resizeImage = await resizeFile(fileInput.files[0]);\r\n            \r\n            setSongImageFile(resizeImage);\r\n\r\n            // Use FileReader to read the image and set it as a preview\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                setSongImage(event.target.result);\r\n            };\r\n            reader.readAsDataURL(resizeImage);\r\n\r\n        } else {\r\n            setSongImage('Không có ảnh nào được chọn');\r\n        }\r\n    }\r\n\r\n    const resizeFile = (file) => {\r\n        return new Promise(resolve => {\r\n            Resizer.imageFileResizer(file, 295, 300, 'JPEG', 100, 0,\r\n                uri => {\r\n                    resolve(uri);\r\n                }, 'file');\r\n        })\r\n    };\r\n\r\n    const handleUploadClick = async () => {\r\n        if (nameSong.trim() == \"\") {\r\n            return\r\n        }\r\n        if (author.trim() == \"\") {\r\n            return\r\n        }\r\n        if (music == \"\") {\r\n            return\r\n        }\r\n\r\n        const infoSong = {\r\n            'name': nameSong,\r\n            'author': author,\r\n            'owner': user._id,\r\n            'creationtime': new Date()\r\n        }\r\n\r\n        // Add music to database     \r\n        const payload = await MusicService.createMusic(infoSong, music, songImageFile)\r\n\r\n        onPopup(false);\r\n        onAlert({ code: payload.code, message: payload.message });\r\n        onState(true);\r\n\r\n        resetForm();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setNameSong(\"\")\r\n        setAuthor(\"\")\r\n        setFileName('No file chosen')\r\n    }\r\n\r\n    return (\r\n        <div className=\"modalForm\">\r\n         {\r\n            (isChooseManual) ? <ManualMusicUploadForm /> : <YoutubeMusicUploadForm />\r\n         }\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}